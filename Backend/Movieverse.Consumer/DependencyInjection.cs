using System.Reflection;
using MassTransit;
using Movieverse.Consumer.Common.Settings;
using Movieverse.Consumer.Consumers;

namespace Movieverse.Consumer;

public static class DependencyInjection
{
	public static IServiceCollection AddMassTransit(this IServiceCollection services, IConfiguration configuration)
	{
		var sqsSettings = new AmazonSQSSettings();
		configuration.Bind(AmazonSQSSettings.key, sqsSettings);
		
		services.AddMassTransit(busCfg =>
		{
			busCfg.SetKebabCaseEndpointNameFormatter();
			busCfg.SetInMemorySagaRepositoryProvider();

			var assembly = Assembly.GetExecutingAssembly();
			busCfg.AddConsumers(assembly);
			busCfg.AddSagaStateMachines(assembly);
			busCfg.AddSagas(assembly);
			busCfg.AddActivities(assembly);

			busCfg.UsingAmazonSqs((context, sqsCfg) =>
			{
				sqsCfg.Host(sqsSettings.Host, hostCfg =>
				{
					hostCfg.SecretKey(sqsSettings.SecretKey);
					hostCfg.AccessKey(sqsSettings.AccessKey);
				});
                
				sqsCfg.ReceiveEndpoint<UserRegisteredConsumer>(sqsSettings, context)
					.ReceiveEndpoint<ImageAddedConsumer>(sqsSettings, context);
			});
		});
		
		return services;
	}

	/// <summary>
	/// This method is used to configure the MassTransit Amazon SQS receive endpoints.
	/// Queue name and topic are not generated automatically, so we need to provide them manually.
	/// Queue name is generated by combining the queue name from the appsettings.json and the message class name.
	/// </summary>
	private static IAmazonSqsBusFactoryConfigurator ReceiveEndpoint<T>(this IAmazonSqsBusFactoryConfigurator cfg, 
		AmazonSQSSettings settings, IServiceProvider context)
		where T : class, IConsumer
	{
		var queueName = $"{settings.QueueName}-{typeof(T).Name}";
		
		cfg.ReceiveEndpoint(queueName, endpointCfg =>
		{
			endpointCfg.ConfigureConsumeTopology = false;
			endpointCfg.Consumer<T>(context);
		});

		return cfg;
	}
}