using System.Reflection;
using MassTransit;
using Movieverse.Consumer.Common.Settings;

namespace Movieverse.Consumer.Common;

public static class AmazonSqsExtensions
{
	
	/// <summary>
	/// This method is used to configure the MassTransit Amazon SQS receive endpoints using reflection.
	/// </summary>
	public static IAmazonSqsBusFactoryConfigurator ReceiveEndpoints(this IAmazonSqsBusFactoryConfigurator cfg, 
		AmazonSQSSettings settings, IServiceProvider context)
	{
		var types = Assembly.GetExecutingAssembly().GetTypes()
			.Where(type => typeof(IConsumer).IsAssignableFrom(type) && type is { IsInterface: false, IsAbstract: false })
			.ToList();

		types.ForEach(type =>
		{
			typeof(AmazonSqsExtensions)
				.GetMethod(nameof(ReceiveEndpoint))
				?.MakeGenericMethod(type)
				.Invoke(null, new object[] { cfg, settings, context });
		});
		
		return cfg;
	}
	
	/// <summary>
	/// This method is used to configure the MassTransit Amazon SQS receive endpoints.
	/// Queue name and topic are not generated automatically, so we need to provide them manually.
	/// Queue name is generated by combining the queue name from the appsettings.json and the message class name.
	/// </summary>
	public static IAmazonSqsBusFactoryConfigurator ReceiveEndpoint<T>(this IAmazonSqsBusFactoryConfigurator cfg, 
		AmazonSQSSettings settings, IServiceProvider context)
		where T : class, IConsumer
	{
		var queueName = $"{settings.QueueName}-{typeof(T).Name}";
		
		cfg.ReceiveEndpoint(queueName, endpointCfg =>
		{
			endpointCfg.ConfigureConsumeTopology = false;
			endpointCfg.Consumer<T>(context);
		});

		return cfg;
	}
}