// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Movieverse.Domain.Common.Types;
using Movieverse.Infrastructure.Persistence;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace Movieverse.Infrastructure.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20230806184924_Initial")]
    partial class Initial
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.9")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.HasPostgresEnum(modelBuilder, "role", new[] { "director", "writer", "actor", "creator", "producer", "composer", "cinematographer", "editor", "art_director", "costume_designer", "makeup_artist", "sound_designer", "other" });
            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("text");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("text");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("text");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uuid");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("Value")
                        .HasColumnType("text");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("Movieverse.Domain.AggregateRoots.Content", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("ContentType")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Path")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Title")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<DateTimeOffset?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.ToTable("Contents");
                });

            modelBuilder.Entity("Movieverse.Domain.AggregateRoots.Genre", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)");

                    b.Property<long>("MediaCount")
                        .HasColumnType("bigint");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<DateTimeOffset?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.ToTable("Genres");
                });

            modelBuilder.Entity("Movieverse.Domain.AggregateRoots.Media.Media", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<long?>("CurrentPosition")
                        .HasColumnType("bigint");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid?>("PosterId")
                        .HasColumnType("uuid");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<Guid?>("TrailerId")
                        .HasColumnType("uuid");

                    b.Property<DateTimeOffset?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.ToTable("Medias");

                    b.HasDiscriminator<string>("Discriminator").HasValue("Media");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("Movieverse.Domain.AggregateRoots.Person", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Biography")
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("FunFacts")
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)");

                    b.Property<DateTimeOffset?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.ToTable("Persons");
                });

            modelBuilder.Entity("Movieverse.Domain.AggregateRoots.Platform", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("LogoId")
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<decimal>("Price")
                        .HasPrecision(2)
                        .HasColumnType("numeric(2)");

                    b.Property<DateTimeOffset?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.ToTable("Platforms");
                });

            modelBuilder.Entity("Movieverse.Domain.AggregateRoots.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("integer");

                    b.Property<Guid?>("AvatarId")
                        .HasColumnType("uuid");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("boolean");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("boolean");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("text");

                    b.Property<Guid?>("PersonId")
                        .HasColumnType("uuid");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("text");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("boolean");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("text");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("boolean");

                    b.Property<string>("UserName")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.ToTable("Users", (string)null);
                });

            modelBuilder.Entity("Movieverse.Domain.Common.Models.IdentityUserRole", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Movieverse.Domain.Entities.Award", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<Guid?>("ImageId")
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Award");
                });

            modelBuilder.Entity("Movieverse.Domain.Entities.Statistics", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<Guid>("MediaId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("MediaId")
                        .IsUnique();

                    b.ToTable("Statistics");
                });

            modelBuilder.Entity("Movieverse.Domain.Entities.StatisticsAward", b =>
                {
                    b.Property<int>("StatisticsId")
                        .HasColumnType("integer");

                    b.Property<int>("AwardId")
                        .HasColumnType("integer");

                    b.Property<int>("Place")
                        .HasColumnType("integer");

                    b.Property<int>("Year")
                        .HasColumnType("integer");

                    b.HasKey("StatisticsId", "AwardId");

                    b.HasIndex("AwardId");

                    b.ToTable("StatisticsAward");
                });

            modelBuilder.Entity("Movieverse.Domain.AggregateRoots.Media.Movie", b =>
                {
                    b.HasBaseType("Movieverse.Domain.AggregateRoots.Media.Media");

                    b.Property<Guid?>("PrequelId")
                        .HasColumnType("uuid");

                    b.Property<string>("PrequelTitle")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<Guid?>("SequelId")
                        .HasColumnType("uuid");

                    b.Property<string>("SequelTitle")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.HasDiscriminator().HasValue("Movie");
                });

            modelBuilder.Entity("Movieverse.Domain.AggregateRoots.Media.Series", b =>
                {
                    b.HasBaseType("Movieverse.Domain.AggregateRoots.Media.Media");

                    b.Property<int?>("EpisodeCount")
                        .HasColumnType("integer");

                    b.Property<int?>("SeasonCount")
                        .HasColumnType("integer");

                    b.HasDiscriminator().HasValue("Series");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.HasOne("Movieverse.Domain.Common.Models.IdentityUserRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.HasOne("Movieverse.Domain.AggregateRoots.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.HasOne("Movieverse.Domain.AggregateRoots.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<System.Guid>", b =>
                {
                    b.HasOne("Movieverse.Domain.Common.Models.IdentityUserRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Movieverse.Domain.AggregateRoots.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.HasOne("Movieverse.Domain.AggregateRoots.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Movieverse.Domain.AggregateRoots.Genre", b =>
                {
                    b.OwnsMany("Movieverse.Domain.ValueObjects.Id.AggregateRootId", "MediaIds", b1 =>
                        {
                            b1.Property<int>("Id")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("integer");

                            NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b1.Property<int>("Id"));

                            b1.Property<Guid>("GenreId")
                                .HasColumnType("uuid");

                            b1.Property<Guid>("Value")
                                .HasColumnType("uuid")
                                .HasColumnName("MediaId");

                            b1.HasKey("Id");

                            b1.HasIndex("GenreId");

                            b1.ToTable("GenreMediaIds", (string)null);

                            b1.WithOwner()
                                .HasForeignKey("GenreId");
                        });

                    b.Navigation("MediaIds");
                });

            modelBuilder.Entity("Movieverse.Domain.AggregateRoots.Media.Media", b =>
                {
                    b.OwnsMany("Movieverse.Domain.ValueObjects.Id.AggregateRootId", "ContentIds", b1 =>
                        {
                            b1.Property<int>("Id")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("integer");

                            NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b1.Property<int>("Id"));

                            b1.Property<Guid>("MediaId")
                                .HasColumnType("uuid");

                            b1.Property<Guid>("Value")
                                .HasColumnType("uuid")
                                .HasColumnName("ContentId");

                            b1.HasKey("Id");

                            b1.HasIndex("MediaId");

                            b1.ToTable("MediaContentIds", (string)null);

                            b1.WithOwner()
                                .HasForeignKey("MediaId");
                        });

                    b.OwnsMany("Movieverse.Domain.ValueObjects.Id.AggregateRootId", "GenreIds", b1 =>
                        {
                            b1.Property<int>("Id")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("integer");

                            NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b1.Property<int>("Id"));

                            b1.Property<Guid>("MediaId")
                                .HasColumnType("uuid");

                            b1.Property<Guid>("Value")
                                .HasColumnType("uuid")
                                .HasColumnName("GenreId");

                            b1.HasKey("Id");

                            b1.HasIndex("MediaId");

                            b1.ToTable("MediaGenreIds", (string)null);

                            b1.WithOwner()
                                .HasForeignKey("MediaId");
                        });

                    b.OwnsMany("Movieverse.Domain.ValueObjects.Id.AggregateRootId", "PlatformIds", b1 =>
                        {
                            b1.Property<int>("Id")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("integer");

                            NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b1.Property<int>("Id"));

                            b1.Property<Guid>("MediaId")
                                .HasColumnType("uuid");

                            b1.Property<Guid>("Value")
                                .HasColumnType("uuid")
                                .HasColumnName("PlatformId");

                            b1.HasKey("Id");

                            b1.HasIndex("MediaId");

                            b1.ToTable("MediaPlatformIds", (string)null);

                            b1.WithOwner()
                                .HasForeignKey("MediaId");
                        });

                    b.OwnsMany("Movieverse.Domain.Entities.Review", "Reviews", b1 =>
                        {
                            b1.Property<int>("Id")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("integer");

                            NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b1.Property<int>("Id"));

                            b1.Property<bool>("Banned")
                                .HasColumnType("boolean");

                            b1.Property<bool>("ByCritic")
                                .HasColumnType("boolean");

                            b1.Property<string>("Content")
                                .IsRequired()
                                .HasMaxLength(3000)
                                .HasColumnType("character varying(3000)");

                            b1.Property<DateTimeOffset>("Date")
                                .HasColumnType("timestamp with time zone");

                            b1.Property<bool>("Deleted")
                                .HasColumnType("boolean");

                            b1.Property<Guid>("MediaId")
                                .HasColumnType("uuid");

                            b1.Property<bool>("Modified")
                                .HasColumnType("boolean");

                            b1.Property<short>("Rating")
                                .HasColumnType("smallint");

                            b1.Property<bool>("Spoiler")
                                .HasColumnType("boolean");

                            b1.Property<string>("Title")
                                .IsRequired()
                                .HasMaxLength(100)
                                .HasColumnType("character varying(100)");

                            b1.Property<Guid>("UserId")
                                .HasColumnType("uuid");

                            b1.Property<string>("UserName")
                                .IsRequired()
                                .HasMaxLength(100)
                                .HasColumnType("character varying(100)");

                            b1.HasKey("Id");

                            b1.HasIndex("MediaId");

                            b1.ToTable("MediaReviews", (string)null);

                            b1.WithOwner()
                                .HasForeignKey("MediaId");
                        });

                    b.OwnsMany("Movieverse.Domain.Entities.Staff", "Staff", b1 =>
                        {
                            b1.Property<int>("Id")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("integer");

                            NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b1.Property<int>("Id"));

                            b1.Property<Guid>("MediaId")
                                .HasColumnType("uuid");

                            b1.Property<Guid>("PersonId")
                                .HasColumnType("uuid");

                            b1.Property<Role>("Role")
                                .HasColumnType("role");

                            b1.HasKey("Id");

                            b1.HasIndex("MediaId");

                            b1.ToTable("Staff");

                            b1.WithOwner("Media")
                                .HasForeignKey("MediaId");

                            b1.Navigation("Media");
                        });

                    b.Navigation("ContentIds");

                    b.Navigation("GenreIds");

                    b.Navigation("PlatformIds");

                    b.Navigation("Reviews");

                    b.Navigation("Staff");
                });

            modelBuilder.Entity("Movieverse.Domain.AggregateRoots.Person", b =>
                {
                    b.OwnsMany("Movieverse.Domain.ValueObjects.Id.AggregateRootId", "ContentIds", b1 =>
                        {
                            b1.Property<int>("Id")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("integer");

                            NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b1.Property<int>("Id"));

                            b1.Property<Guid>("PersonId")
                                .HasColumnType("uuid");

                            b1.Property<Guid>("Value")
                                .HasColumnType("uuid")
                                .HasColumnName("ContentId");

                            b1.HasKey("Id");

                            b1.HasIndex("PersonId");

                            b1.ToTable("PersonContentIds", (string)null);

                            b1.WithOwner()
                                .HasForeignKey("PersonId");
                        });

                    b.OwnsOne("Movieverse.Domain.ValueObjects.Information", "Information", b1 =>
                        {
                            b1.Property<Guid>("PersonId")
                                .HasColumnType("uuid");

                            b1.Property<int>("Age")
                                .HasColumnType("integer");

                            b1.Property<string>("FirstName")
                                .HasMaxLength(100)
                                .HasColumnType("character varying(100)");

                            b1.Property<string>("LastName")
                                .HasMaxLength(100)
                                .HasColumnType("character varying(100)");

                            b1.HasKey("PersonId");

                            b1.ToTable("Persons");

                            b1.WithOwner()
                                .HasForeignKey("PersonId");
                        });

                    b.OwnsOne("Movieverse.Domain.ValueObjects.LifeHistory", "LifeHistory", b1 =>
                        {
                            b1.Property<Guid>("PersonId")
                                .HasColumnType("uuid");

                            b1.Property<DateTimeOffset?>("BirthDate")
                                .HasColumnType("timestamp with time zone");

                            b1.Property<string>("BirthPlace")
                                .HasColumnType("text");

                            b1.Property<DateTimeOffset?>("CareerEnd")
                                .HasColumnType("timestamp with time zone");

                            b1.Property<DateTimeOffset?>("CareerStart")
                                .HasColumnType("timestamp with time zone");

                            b1.Property<DateTimeOffset?>("DeathDate")
                                .HasColumnType("timestamp with time zone");

                            b1.Property<string>("DeathPlace")
                                .HasColumnType("text");

                            b1.HasKey("PersonId");

                            b1.ToTable("Persons");

                            b1.WithOwner()
                                .HasForeignKey("PersonId");
                        });

                    b.Navigation("ContentIds");

                    b.Navigation("Information")
                        .IsRequired();

                    b.Navigation("LifeHistory")
                        .IsRequired();
                });

            modelBuilder.Entity("Movieverse.Domain.AggregateRoots.Platform", b =>
                {
                    b.OwnsMany("Movieverse.Domain.ValueObjects.Id.AggregateRootId", "MediaIds", b1 =>
                        {
                            b1.Property<int>("Id")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("integer");

                            NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b1.Property<int>("Id"));

                            b1.Property<Guid>("PlatformId")
                                .HasColumnType("uuid");

                            b1.Property<Guid>("Value")
                                .HasColumnType("uuid")
                                .HasColumnName("MediaId");

                            b1.HasKey("Id");

                            b1.HasIndex("PlatformId");

                            b1.ToTable("PlatformMediaIds", (string)null);

                            b1.WithOwner()
                                .HasForeignKey("PlatformId");
                        });

                    b.Navigation("MediaIds");
                });

            modelBuilder.Entity("Movieverse.Domain.AggregateRoots.User", b =>
                {
                    b.OwnsOne("Movieverse.Domain.ValueObjects.Information", "Information", b1 =>
                        {
                            b1.Property<Guid>("UserId")
                                .HasColumnType("uuid");

                            b1.Property<int>("Age")
                                .HasColumnType("integer");

                            b1.Property<string>("FirstName")
                                .HasMaxLength(100)
                                .HasColumnType("character varying(100)");

                            b1.Property<string>("LastName")
                                .HasMaxLength(100)
                                .HasColumnType("character varying(100)");

                            b1.HasKey("UserId");

                            b1.ToTable("Users");

                            b1.WithOwner()
                                .HasForeignKey("UserId");
                        });

                    b.OwnsMany("Movieverse.Domain.Entities.MediaInfo", "MediaInfos", b1 =>
                        {
                            b1.Property<int>("Id")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("integer");

                            NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b1.Property<int>("Id"));

                            b1.Property<bool>("IsInWatchlist")
                                .HasColumnType("boolean");

                            b1.Property<Guid>("MediaId")
                                .HasColumnType("uuid");

                            b1.Property<int>("Rating")
                                .HasColumnType("integer");

                            b1.Property<Guid>("UserId")
                                .HasColumnType("uuid");

                            b1.HasKey("Id");

                            b1.HasIndex("UserId");

                            b1.ToTable("MediaInfo");

                            b1.WithOwner("User")
                                .HasForeignKey("UserId");

                            b1.Navigation("User");
                        });

                    b.Navigation("Information")
                        .IsRequired();

                    b.Navigation("MediaInfos");
                });

            modelBuilder.Entity("Movieverse.Domain.Entities.Statistics", b =>
                {
                    b.HasOne("Movieverse.Domain.AggregateRoots.Media.Media", "Media")
                        .WithOne("AdvancedStatistics")
                        .HasForeignKey("Movieverse.Domain.Entities.Statistics", "MediaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.OwnsMany("Movieverse.Domain.Entities.Popularity", "Popularity", b1 =>
                        {
                            b1.Property<int>("Id")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("integer");

                            NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b1.Property<int>("Id"));

                            b1.Property<long?>("Change")
                                .HasColumnType("bigint");

                            b1.Property<DateTimeOffset>("Date")
                                .HasColumnType("timestamp with time zone");

                            b1.Property<long?>("Position")
                                .HasColumnType("bigint");

                            b1.Property<int>("StatisticsId")
                                .HasColumnType("integer");

                            b1.HasKey("Id");

                            b1.HasIndex("StatisticsId");

                            b1.ToTable("Popularity");

                            b1.WithOwner("Statistics")
                                .HasForeignKey("StatisticsId");

                            b1.OwnsOne("Movieverse.Domain.ValueObjects.BasicStatistics", "BasicStatistics", b2 =>
                                {
                                    b2.Property<int>("PopularityId")
                                        .HasColumnType("integer");

                                    b2.Property<long>("CriticReviews")
                                        .HasColumnType("bigint");

                                    b2.Property<long>("InWatchlistCount")
                                        .HasColumnType("bigint");

                                    b2.Property<int>("Rating")
                                        .HasColumnType("integer");

                                    b2.Property<long>("UserReviews")
                                        .HasColumnType("bigint");

                                    b2.Property<long>("Votes")
                                        .HasColumnType("bigint");

                                    b2.HasKey("PopularityId");

                                    b2.ToTable("Popularity");

                                    b2.WithOwner()
                                        .HasForeignKey("PopularityId");
                                });

                            b1.Navigation("BasicStatistics")
                                .IsRequired();

                            b1.Navigation("Statistics");
                        });

                    b.OwnsOne("Movieverse.Domain.ValueObjects.BoxOffice", "BoxOffice", b1 =>
                        {
                            b1.Property<int>("StatisticsId")
                                .HasColumnType("integer");

                            b1.Property<decimal>("Budget")
                                .HasColumnType("numeric");

                            b1.Property<decimal>("GrossUs")
                                .HasColumnType("numeric");

                            b1.Property<decimal>("GrossWorldwide")
                                .HasColumnType("numeric");

                            b1.Property<decimal>("OpeningWeekendUs")
                                .HasColumnType("numeric");

                            b1.Property<decimal>("OpeningWeekendWorldwide")
                                .HasColumnType("numeric");

                            b1.Property<decimal>("Revenue")
                                .HasColumnType("numeric");

                            b1.Property<int>("Theaters")
                                .HasColumnType("integer");

                            b1.HasKey("StatisticsId");

                            b1.ToTable("Statistics");

                            b1.WithOwner()
                                .HasForeignKey("StatisticsId");
                        });

                    b.Navigation("BoxOffice")
                        .IsRequired();

                    b.Navigation("Media");

                    b.Navigation("Popularity");
                });

            modelBuilder.Entity("Movieverse.Domain.Entities.StatisticsAward", b =>
                {
                    b.HasOne("Movieverse.Domain.Entities.Award", "Award")
                        .WithMany("StatisticsAwards")
                        .HasForeignKey("AwardId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Movieverse.Domain.Entities.Statistics", "Statistics")
                        .WithMany("StatisticsAwards")
                        .HasForeignKey("StatisticsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Award");

                    b.Navigation("Statistics");
                });

            modelBuilder.Entity("Movieverse.Domain.AggregateRoots.Media.Movie", b =>
                {
                    b.OwnsOne("Movieverse.Domain.ValueObjects.BasicStatistics", "BasicStatistics", b1 =>
                        {
                            b1.Property<Guid>("MovieId")
                                .HasColumnType("uuid");

                            b1.Property<long>("CriticReviews")
                                .ValueGeneratedOnUpdateSometimes()
                                .HasColumnType("bigint");

                            b1.Property<long>("InWatchlistCount")
                                .ValueGeneratedOnUpdateSometimes()
                                .HasColumnType("bigint");

                            b1.Property<int>("Rating")
                                .ValueGeneratedOnUpdateSometimes()
                                .HasColumnType("integer");

                            b1.Property<long>("UserReviews")
                                .ValueGeneratedOnUpdateSometimes()
                                .HasColumnType("bigint");

                            b1.Property<long>("Votes")
                                .ValueGeneratedOnUpdateSometimes()
                                .HasColumnType("bigint");

                            b1.HasKey("MovieId");

                            b1.ToTable("Medias");

                            b1.WithOwner()
                                .HasForeignKey("MovieId");
                        });

                    b.OwnsOne("Movieverse.Domain.ValueObjects.Details", "Details", b1 =>
                        {
                            b1.Property<Guid>("MovieId")
                                .HasColumnType("uuid");

                            b1.Property<int?>("Certificate")
                                .ValueGeneratedOnUpdateSometimes()
                                .HasColumnType("integer");

                            b1.Property<string>("CountryOfOrigin")
                                .ValueGeneratedOnUpdateSometimes()
                                .HasColumnType("text");

                            b1.Property<string>("FilmingLocations")
                                .ValueGeneratedOnUpdateSometimes()
                                .HasColumnType("text");

                            b1.Property<string>("Language")
                                .ValueGeneratedOnUpdateSometimes()
                                .HasColumnType("text");

                            b1.Property<DateTimeOffset?>("ReleaseDate")
                                .ValueGeneratedOnUpdateSometimes()
                                .HasColumnType("timestamp with time zone");

                            b1.Property<int?>("Runtime")
                                .ValueGeneratedOnUpdateSometimes()
                                .HasColumnType("integer");

                            b1.Property<string>("Storyline")
                                .ValueGeneratedOnUpdateSometimes()
                                .HasColumnType("text");

                            b1.Property<string>("Tagline")
                                .ValueGeneratedOnUpdateSometimes()
                                .HasColumnType("text");

                            b1.HasKey("MovieId");

                            b1.ToTable("Medias");

                            b1.WithOwner()
                                .HasForeignKey("MovieId");
                        });

                    b.OwnsOne("Movieverse.Domain.ValueObjects.TechnicalSpecs", "TechnicalSpecs", b1 =>
                        {
                            b1.Property<Guid>("MovieId")
                                .HasColumnType("uuid");

                            b1.Property<string>("AspectRatio")
                                .ValueGeneratedOnUpdateSometimes()
                                .HasColumnType("text");

                            b1.Property<string>("Camera")
                                .ValueGeneratedOnUpdateSometimes()
                                .HasColumnType("text");

                            b1.Property<string>("Color")
                                .ValueGeneratedOnUpdateSometimes()
                                .HasColumnType("text");

                            b1.Property<string>("NegativeFormat")
                                .ValueGeneratedOnUpdateSometimes()
                                .HasColumnType("text");

                            b1.Property<string>("SoundMix")
                                .ValueGeneratedOnUpdateSometimes()
                                .HasColumnType("text");

                            b1.HasKey("MovieId");

                            b1.ToTable("Medias");

                            b1.WithOwner()
                                .HasForeignKey("MovieId");
                        });

                    b.Navigation("BasicStatistics")
                        .IsRequired();

                    b.Navigation("Details")
                        .IsRequired();

                    b.Navigation("TechnicalSpecs")
                        .IsRequired();
                });

            modelBuilder.Entity("Movieverse.Domain.AggregateRoots.Media.Series", b =>
                {
                    b.OwnsOne("Movieverse.Domain.ValueObjects.BasicStatistics", "BasicStatistics", b1 =>
                        {
                            b1.Property<Guid>("SeriesId")
                                .HasColumnType("uuid");

                            b1.Property<long>("CriticReviews")
                                .ValueGeneratedOnUpdateSometimes()
                                .HasColumnType("bigint");

                            b1.Property<long>("InWatchlistCount")
                                .ValueGeneratedOnUpdateSometimes()
                                .HasColumnType("bigint");

                            b1.Property<int>("Rating")
                                .ValueGeneratedOnUpdateSometimes()
                                .HasColumnType("integer");

                            b1.Property<long>("UserReviews")
                                .ValueGeneratedOnUpdateSometimes()
                                .HasColumnType("bigint");

                            b1.Property<long>("Votes")
                                .ValueGeneratedOnUpdateSometimes()
                                .HasColumnType("bigint");

                            b1.HasKey("SeriesId");

                            b1.ToTable("Medias");

                            b1.WithOwner()
                                .HasForeignKey("SeriesId");
                        });

                    b.OwnsOne("Movieverse.Domain.ValueObjects.Details", "Details", b1 =>
                        {
                            b1.Property<Guid>("SeriesId")
                                .HasColumnType("uuid");

                            b1.Property<int?>("Certificate")
                                .ValueGeneratedOnUpdateSometimes()
                                .HasColumnType("integer");

                            b1.Property<string>("CountryOfOrigin")
                                .ValueGeneratedOnUpdateSometimes()
                                .HasColumnType("text");

                            b1.Property<string>("FilmingLocations")
                                .ValueGeneratedOnUpdateSometimes()
                                .HasColumnType("text");

                            b1.Property<string>("Language")
                                .ValueGeneratedOnUpdateSometimes()
                                .HasColumnType("text");

                            b1.Property<DateTimeOffset?>("ReleaseDate")
                                .ValueGeneratedOnUpdateSometimes()
                                .HasColumnType("timestamp with time zone");

                            b1.Property<int?>("Runtime")
                                .ValueGeneratedOnUpdateSometimes()
                                .HasColumnType("integer");

                            b1.Property<string>("Storyline")
                                .ValueGeneratedOnUpdateSometimes()
                                .HasColumnType("text");

                            b1.Property<string>("Tagline")
                                .ValueGeneratedOnUpdateSometimes()
                                .HasColumnType("text");

                            b1.HasKey("SeriesId");

                            b1.ToTable("Medias");

                            b1.WithOwner()
                                .HasForeignKey("SeriesId");
                        });

                    b.OwnsOne("Movieverse.Domain.ValueObjects.TechnicalSpecs", "TechnicalSpecs", b1 =>
                        {
                            b1.Property<Guid>("SeriesId")
                                .HasColumnType("uuid");

                            b1.Property<string>("AspectRatio")
                                .ValueGeneratedOnUpdateSometimes()
                                .HasColumnType("text");

                            b1.Property<string>("Camera")
                                .ValueGeneratedOnUpdateSometimes()
                                .HasColumnType("text");

                            b1.Property<string>("Color")
                                .ValueGeneratedOnUpdateSometimes()
                                .HasColumnType("text");

                            b1.Property<string>("NegativeFormat")
                                .ValueGeneratedOnUpdateSometimes()
                                .HasColumnType("text");

                            b1.Property<string>("SoundMix")
                                .ValueGeneratedOnUpdateSometimes()
                                .HasColumnType("text");

                            b1.HasKey("SeriesId");

                            b1.ToTable("Medias");

                            b1.WithOwner()
                                .HasForeignKey("SeriesId");
                        });

                    b.OwnsMany("Movieverse.Domain.Entities.Season", "Seasons", b1 =>
                        {
                            b1.Property<int>("Id")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("integer");

                            NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b1.Property<int>("Id"));

                            b1.Property<long?>("EpisodeCount")
                                .HasColumnType("bigint");

                            b1.Property<long>("SeasonNumber")
                                .HasColumnType("bigint");

                            b1.Property<Guid>("SeriesId")
                                .HasColumnType("uuid");

                            b1.HasKey("Id");

                            b1.HasIndex("SeriesId");

                            b1.ToTable("Season");

                            b1.WithOwner("Series")
                                .HasForeignKey("SeriesId");

                            b1.OwnsMany("Movieverse.Domain.Entities.Episode", "Episodes", b2 =>
                                {
                                    b2.Property<int>("Id")
                                        .ValueGeneratedOnAdd()
                                        .HasColumnType("integer");

                                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b2.Property<int>("Id"));

                                    b2.Property<long>("EpisodeNumber")
                                        .HasColumnType("bigint");

                                    b2.Property<int>("SeasonId")
                                        .HasColumnType("integer");

                                    b2.Property<string>("Title")
                                        .IsRequired()
                                        .HasMaxLength(100)
                                        .HasColumnType("character varying(100)");

                                    b2.HasKey("Id");

                                    b2.HasIndex("SeasonId");

                                    b2.ToTable("Episode");

                                    b2.WithOwner("Season")
                                        .HasForeignKey("SeasonId");

                                    b2.OwnsOne("Movieverse.Domain.ValueObjects.BasicStatistics", "BasicStatistics", b3 =>
                                        {
                                            b3.Property<int>("EpisodeId")
                                                .HasColumnType("integer");

                                            b3.Property<long>("CriticReviews")
                                                .HasColumnType("bigint");

                                            b3.Property<long>("InWatchlistCount")
                                                .HasColumnType("bigint");

                                            b3.Property<int>("Rating")
                                                .HasColumnType("integer");

                                            b3.Property<long>("UserReviews")
                                                .HasColumnType("bigint");

                                            b3.Property<long>("Votes")
                                                .HasColumnType("bigint");

                                            b3.HasKey("EpisodeId");

                                            b3.ToTable("Episode");

                                            b3.WithOwner()
                                                .HasForeignKey("EpisodeId");
                                        });

                                    b2.OwnsMany("Movieverse.Domain.ValueObjects.Id.AggregateRootId", "ContentIds", b3 =>
                                        {
                                            b3.Property<int>("Id")
                                                .ValueGeneratedOnAdd()
                                                .HasColumnType("integer");

                                            NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b3.Property<int>("Id"));

                                            b3.Property<int>("EpisodeId")
                                                .HasColumnType("integer");

                                            b3.Property<Guid>("Value")
                                                .HasColumnType("uuid")
                                                .HasColumnName("ContentId");

                                            b3.HasKey("Id");

                                            b3.HasIndex("EpisodeId");

                                            b3.ToTable("EpisodeContentIds", (string)null);

                                            b3.WithOwner()
                                                .HasForeignKey("EpisodeId");
                                        });

                                    b2.OwnsOne("Movieverse.Domain.ValueObjects.Details", "Details", b3 =>
                                        {
                                            b3.Property<int>("EpisodeId")
                                                .HasColumnType("integer");

                                            b3.Property<int?>("Certificate")
                                                .HasColumnType("integer");

                                            b3.Property<string>("CountryOfOrigin")
                                                .HasColumnType("text");

                                            b3.Property<string>("FilmingLocations")
                                                .HasColumnType("text");

                                            b3.Property<string>("Language")
                                                .HasColumnType("text");

                                            b3.Property<DateTimeOffset?>("ReleaseDate")
                                                .HasColumnType("timestamp with time zone");

                                            b3.Property<int?>("Runtime")
                                                .HasColumnType("integer");

                                            b3.Property<string>("Storyline")
                                                .HasColumnType("text");

                                            b3.Property<string>("Tagline")
                                                .HasColumnType("text");

                                            b3.HasKey("EpisodeId");

                                            b3.ToTable("Episode");

                                            b3.WithOwner()
                                                .HasForeignKey("EpisodeId");
                                        });

                                    b2.OwnsMany("Movieverse.Domain.Entities.Review", "Reviews", b3 =>
                                        {
                                            b3.Property<int>("Id")
                                                .ValueGeneratedOnAdd()
                                                .HasColumnType("integer");

                                            NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b3.Property<int>("Id"));

                                            b3.Property<bool>("Banned")
                                                .HasColumnType("boolean");

                                            b3.Property<bool>("ByCritic")
                                                .HasColumnType("boolean");

                                            b3.Property<string>("Content")
                                                .IsRequired()
                                                .HasMaxLength(3000)
                                                .HasColumnType("character varying(3000)");

                                            b3.Property<DateTimeOffset>("Date")
                                                .HasColumnType("timestamp with time zone");

                                            b3.Property<bool>("Deleted")
                                                .HasColumnType("boolean");

                                            b3.Property<int>("EpisodeId")
                                                .HasColumnType("integer");

                                            b3.Property<bool>("Modified")
                                                .HasColumnType("boolean");

                                            b3.Property<short>("Rating")
                                                .HasColumnType("smallint");

                                            b3.Property<bool>("Spoiler")
                                                .HasColumnType("boolean");

                                            b3.Property<string>("Title")
                                                .IsRequired()
                                                .HasMaxLength(100)
                                                .HasColumnType("character varying(100)");

                                            b3.Property<Guid>("UserId")
                                                .HasColumnType("uuid");

                                            b3.Property<string>("UserName")
                                                .IsRequired()
                                                .HasMaxLength(100)
                                                .HasColumnType("character varying(100)");

                                            b3.HasKey("Id");

                                            b3.HasIndex("EpisodeId");

                                            b3.ToTable("EpisodeReviews", (string)null);

                                            b3.WithOwner()
                                                .HasForeignKey("EpisodeId");
                                        });

                                    b2.Navigation("BasicStatistics")
                                        .IsRequired();

                                    b2.Navigation("ContentIds");

                                    b2.Navigation("Details")
                                        .IsRequired();

                                    b2.Navigation("Reviews");

                                    b2.Navigation("Season");
                                });

                            b1.Navigation("Episodes");

                            b1.Navigation("Series");
                        });

                    b.Navigation("BasicStatistics")
                        .IsRequired();

                    b.Navigation("Details")
                        .IsRequired();

                    b.Navigation("Seasons");

                    b.Navigation("TechnicalSpecs")
                        .IsRequired();
                });

            modelBuilder.Entity("Movieverse.Domain.AggregateRoots.Media.Media", b =>
                {
                    b.Navigation("AdvancedStatistics")
                        .IsRequired();
                });

            modelBuilder.Entity("Movieverse.Domain.Entities.Award", b =>
                {
                    b.Navigation("StatisticsAwards");
                });

            modelBuilder.Entity("Movieverse.Domain.Entities.Statistics", b =>
                {
                    b.Navigation("StatisticsAwards");
                });
#pragma warning restore 612, 618
        }
    }
}
